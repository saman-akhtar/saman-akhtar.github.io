{"version":3,"sources":["components/DashboardItem.js","components/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["rand","Math","round","random","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","DashboardItem","props","classes","React","useState","modalStyle","open","setOpen","Date","selectedDate","setSelectedDate","timelineStart","setTimelineStart","timelineEnd","setTimelineEnd","setTimeline","setHours","console","log","timelineData","person","activity_periods","map","p","time","start_time","split","date","valueOf","end_time","startTime","endTime","className","style","real_name","tz","onClick","data-toggle","data-target","Modal","onClose","aria-labelledby","aria-describedby","id","selected","onChange","Dashboard","state","items","appData","this","members","e","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.17e415f0.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nfunction rand() {\n    return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n    const top = 50 + rand();\n    const left = 50 + rand();\n\n    return {\n        top: `${top}%`,\n        left: `${left}%`,\n        transform: `translate(-${top}%, -${left}%)`,\n    };\n}\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        position: 'absolute',\n        width: 400,\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n    },\n}));\n\nexport default function DashboardItem(props) {\n    const classes = useStyles();\n    const [modalStyle] = React.useState(getModalStyle);\n    const [open, setOpen] = React.useState(false);\n    const [selectedDate, setSelectedDate] = React.useState(new Date());\n    const [timelineStart, setTimelineStart] = React.useState(null);\n    const [timelineEnd, setTimelineEnd] = React.useState(null);\n    const handleChange = (date) => {\n        setSelectedDate(date);\n        setTimeline(date);\n    };\n    const setTimeline = (selectedDate) => {\n        setTimelineStart(null);\n        setTimelineEnd(null);\n        selectedDate.setHours(0, 0, 0, 0);\n        console.log(selectedDate);\n        const timelineData = props.person.activity_periods.map(p => {\n            const time = p.start_time.split(' ');\n            const date = new Date(`${time[0]} ${time[1]} ${time[2]}`);\n            console.log(date);\n            if (selectedDate.valueOf() == date.valueOf()) {\n                console.log('active');\n                setTimelineStart(time[4]);\n                setTimelineEnd(p.end_time.split(' ')[3]);\n            }\n            return {\n                date: date,\n                startTime: time[4],\n                endTime: p.end_time.split(' ')[3]\n            }\n        });\n        console.log(timelineData);\n    };\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    return (\n        <div>\n            <div className=\"card\" style={{ width: \"18rem\" }}>\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">{props.person.real_name}</h5>\n                    <p className=\"card-text\">{`Location: ${props.person.tz}`}</p>\n                    <button onClick={handleOpen} className=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#exampleModal\">View Timeline</button>\n\n                </div>\n            </div>\n            <Modal\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n            >\n                <div style={modalStyle} className={classes.paper}>\n                    <h2 id=\"simple-modal-title\">Timeline for {props.person.real_name}</h2>\n                    <DatePicker\n                        selected={selectedDate}\n                        onChange={handleChange}\n                    />\n                    {\n                        timelineStart && timelineEnd?\n                        <div>Person was active from {timelineStart} to {timelineEnd}</div> :\n                        <div>Oops! No activity...</div>\n                    }\n                </div>\n            </Modal>\n        </div>\n    );\n}\n","import React, { Component } from 'react';\nimport appData from '../data/data.json';\nimport DashboardItem from './DashboardItem';\n\nclass Dashboard extends Component {\n    constructor() {\n        \n        super();\n        this.state = {\n            items: appData\n        };\n    }\n\n    render() {\n        return <div className=\"container-fluid\">\n            <div className=\"row\">\n            {\n                this.state.items.members.map(e => {\n                    return <div className=\"col-md-3\">\n                        <DashboardItem person={e}></DashboardItem>\n                    </div>\n                })\n            }\n            </div>\n        </div>\n    }\n}\nexport default Dashboard; ","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Dashboard from './components/Dashboard';\n\nfunction App() {\n  return (\n    <Dashboard></Dashboard>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}